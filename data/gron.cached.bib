@article{359585,
        title = {Communicating Sequential Processes},
        address = {New York, NY, USA},
        author = {C. A. R. Hoare},
        journal = {Commun. ACM},
        number = 8,
        pages = {666--677},
        publisher = {ACM},
        volume = 21,
        year = 1978,
        url = {http://portal.acm.org/citation.cfm?id=359585&dl=GUIDE&coll=GUIDE&CFID=19884966&CFTOKEN=55490895},
        description = {Communicating Sequential Processes},
	abstract = {This paper suggests that input and output are basic primitives of programming and that parallel composition of communicating sequential processes is a fundamental program structuring method. When combined with a development of Dijkstra's guarded command, these concepts are surprisingly versatile. Their use is illustrated by sample solutions of a variety of a familiar programming exercises.},
	biburl = {http://www.bibsonomy.org/bibtex/2bbc1e9954656673f6973e4e958a787ac/gron},
	keywords = {CSP},
    issn = {0001-0782}, doi = {http://doi.acm.org/10.1145/359576.359585}}

@inproceedings{STAL,
        title = {Stack-Based Typed Assembly Language},
        author = {Gregory J. Morrisett and Karl Crary and Neal Glew and David Walker},
        booktitle = {TIC '98: Proceedings of the Second International Workshop on Types in Compilation},
        pages = {28--52},
        year = 1998,
        url = {http://www.cs.cornell.edu/talc/papers/stal-tic.pdf},
        description = {Stack-Based Typed Assembly Language},
	abstract = {In previous work, we presented Typed Assembly Language (TAL). TAL is sufficiently expressive to serve as a target language for compilers of high-level languages such as ML. That work assumed such a compiler would perform a continuation-passing style transform and eliminate the control stack by heap-allocating activation records. However, most compilers are based on stack allocation. This paper presents STAL, an extension of TAL with stack constructs and stack types to support the stack...},
	biburl = {http://www.bibsonomy.org/bibtex/2653aa855b81a8dfc373f3e7d1a55c3a2/gron},
	keywords = {typed-assembly-language stack-machine TAL},
    }

@inproceedings{MTAL,
        title = {A Multithreaded Typed Assembly Language},
        author = {Vasco T. Vasconcelos and Francisco Martins},
        booktitle = {Multithreading in Hardware and Software: Formal Approaches to Design and Veriﬁcation},
        month = {August},
        year = 2006,
        url = {rap.dsi.unifi.it/sensoria/files/multithreaded-tal.pdf},
        abstract = {We present an assembly language targeted at shared memory multiprocessors, where CPU cores synchronize via locks,acquired with a traditional test and set lock instruction. We show programming examples taken from the literature on Operating Systems, and discuss a typing system that enforces a strict protocol on lock usage and that prevents race
conditions.},
	biburl = {http://www.bibsonomy.org/bibtex/2e24ac22a25fb4676391a2ebbe5a5a523/gron},
	keywords = {typed-assembly-language parallel-programming concurrency TAL},
    }

@inproceedings{Pi2MTAL,
        title = {Compiling the π-calculus into a Multithreaded Typed Assembly Language},
        author = {Tiago Cogumbreiro and Francisco Martins and Vasco T. Vasconcelos},
        booktitle = {Proceedings of Places08 - Programming Language Approaches to Concurrency and Communication-cEntric Software},
        year = 2008,
        url = {http://gloss.di.fc.ul.pt/places08/CompilingPi.pdf},
        biburl = {http://www.bibsonomy.org/bibtex/27d88667379407ffe2438977623973245/gron},
	keywords = {assembly calculus TAL pi},
    }

@phdthesis{PiMaschine,
        title = {Pi: A Parallel Architecture Interface for Multi-Model Execution},
        author = {Donald Scott Wills},
        month = {May},
        type = {Sc.D. Thesis},
        year = 1990,
        url = {http://dspace.mit.edu/handle/1721.1/7035},
        abstract = {This thesis defines Pi, a parallel architecture interface that separates model and machine issues, allowing them to be addressed independently. This provides greater flexibility for both the model and machine builder. Pi addresses a set of common parallel model requirements including low latency communication, fast task switching, low cost synchronization, efficient storage management, the ability to exploit locality, and efficient support for sequential code. Since Pi provides generic parallel operations, it can efficiently support many parallel programming models including hybrids of existing models. Pi also forms a basis of comparison for architectural components.},
	biburl = {http://www.bibsonomy.org/bibtex/2844e9a048f044b0ce16ebfae76a36ef4/gron},
	keywords = {Multi Model ISA Concurrency},
    }

@article{ConcurrencyPrimitives,
        title = {Universal Mechanisms for Concurrency},
        author = {William J. Dally and D. Scott Wills},
        journal = {PARLE '89 Parallel Architectures and Languages Europe},
        pages = {19--33},
        year = 1989,
        url = {http://dx.doi.org/10.1007/3540512845_30},
        description = {SpringerLink - Book Chapter},
	abstract = {We propose a machine model consisting of a set of primitive mechanisms for communication, synchronization, and naming. These mechanisms have been selected as a compromise between what can easily be implemented in hardware and what is required to support parallel models of computation. Implementations of three models of parallel computation: actors, dataflow, and shared-memory using this model are sketched. The costs of the mechanisms on a particular parallel machine are presented and issues involved in implementing the model are discussed. Identifying a primitive set of mechanisms separates issues of programming models from issues of machine organization. Problems are partitioned into those involving implementation of the primitive mechanisms and those involving implementation of programming models and systems using the mechanisms.
ER  -},
	biburl = {http://www.bibsonomy.org/bibtex/2051707e20d9a16b05fbf40a19a822ae6/gron},
	keywords = {Concurrency PhD Primitives},
    }

@book{CompArch,
        title = {Computer Architecture - A Quantitative Approach},
        author = {John L. Hennessy and David A. Patterson},
        edition = {Fourth},
        publisher = {Morgan Kaufmann},
        year = 2007,
        biburl = {http://www.bibsonomy.org/bibtex/26e7d7484e05057928211b221e226e185/gron},
	keywords = {InstructionSet Computer Architecture concurreny},
    }

@inproceedings{1346276,
        title = {Cell GC: Using the Cell Synergistic Processor 
as a Garbage Collection Coprocessor},
        address = {New York, NY, USA},
        author = {Chen-Yong Cher and Michael Gschwind},
        booktitle = {VEE '08: Proceedings of the fourth ACM SIGPLAN/SIGOPS international conference on Virtual execution environments},
        pages = {141--150},
        publisher = {ACM},
        year = 2008,
        url = {http://portal.acm.org/citation.cfm?id=1346256.1346276},
        description = {Cell GC},
	biburl = {http://www.bibsonomy.org/bibtex/27b0adc8da48fa47267684a2c2063d0a5/gron},
	keywords = {GC Cell VM},
    location = {Seattle, WA, USA}, isbn = {978-1-59593-796-4}, doi = {http://doi.acm.org/10.1145/1346256.1346276}}

@article{Jessica,
        title = {JESSICA2: A Distributed Java Virtual Machine with Transparent Thread Migration Support},
        address = {Los Alamitos, CA, USA},
        author = {Wenzhang Zhu and Cho-Li Wang and Francis C. M. Lau},
        journal = {cluster},
        pages = 381,
        publisher = {IEEE Computer Society},
        volume = 00,
        year = 2002,
        description = {JESSICA2: A Distributed Java Virtual Machine with Transparent Thread Migration Support},
	abstract = {A distributed Java Virtual Machine (DJVM) spanning multiple cluster nodes can provide a true parallel execution environment for multi-threaded Java applications. Most existing DJVMs suffer from the slow Java execution in interpretive mode and thus may not be efficient enough for solving computation-intensive problems. We present JESSICA2, a new DJVM running in JIT compilation mode that can execute multi-threaded Java applications transparently on clusters. JESSICA2 provides a single system image (SSI) illusion to Java applications via an embedded global object space (GOS) layer. It implements a cluster-aware Java execution engine that supports transparent Java thread migration for achieving dynamic load balancing. We discuss the issues of supporting transparent Java thread migration in a JIT compilation environment and propose several lightweight solutions. An adaptive migrating-home protocol used in the implementation of the GOS is introduced. The system has been implemented on x86-based Linux clusters, and significant performance improvements over the previous JESSICA system have been observed.},
	biburl = {http://www.bibsonomy.org/bibtex/292c307583468e54b6117cb31711aadb3/gron},
	keywords = {Proposal Distributed DVM VM PhD Java},
    isbn = {0-7695-1745-5}, doi = {http://doi.ieeecomputersociety.org/10.1109/CLUSTR.2002.1137770}}

@inproceedings{10.1109/CISIS.2008.121,
        title = {Java and the Power of Multi-Core Processing},
        address = {Los Alamitos, CA, USA},
        author = {Peter Bertels and Dirk Stroobandt},
        booktitle = {International Conference on Complex, Intelligent and Software Intensive Systems},
        pages = {627-631},
        publisher = {IEEE Computer Society},
        year = 2008,
        description = {Java and the Power of Multi-Core Processing},
	abstract = {The new era of multi-core processing challenges software designers to efficiently exploit the parallelism that is now massively available. Programmers have to exchange the conventional sequential programming paradigm for parallel programming: single-threaded designs must be decomposed into dependent, interacting tasks. The Java programming language has built-in thread support and is therefore suitable for the development of parallel software, but programming multi-threaded applications is a tedious task. Therefore we are working on a framework and tool support to alleviate the burden of threads, synchronisation and locking, based on process networks. This paper describes our initial ideas for this new programming model.},
	biburl = {http://www.bibsonomy.org/bibtex/240cd3367824a82691f45cd4a7799ed7e/gron},
	keywords = {Combination Actors SharedMemory Proposal PhD Java},
    isbn = {978-0-7695-3109-0}, doi = {http://doi.ieeecomputersociety.org/10.1109/CISIS.2008.121}}

@inproceedings{dJVM,
        title = {Designing a distributed JVM on a cluster},
        address = {Nottingham, United Kingdom},
        author = {John Zigman and Ramesh Sankaranarayana},
        booktitle = {Proceedings of the 17th European Simulation Multiconference},
        month = {June},
        year = 2003,
        url = {http://djvm.anu.edu.au/publications/djvm_design.pdf},
        abstract = {dJVM provides a distributed Java virtual Machine (JVM) on a cluster. It hides the distributed nature of 
the underlying machine from a Java application by presenting a single system image (SSI) to that application. 
dJVM is based on the Jikes RVM [Alpern et al, 1999] (a JVM written entirely in Java) and is the first distributed 
implementation of the Jikes RVM.  This provides a framework for exploring a range of distributed runtime support 
algorithms on large clusters. Implementing this system using the Jikes RVM raises a number of issues that are 
addressed in this paper. },
	biburl = {http://www.bibsonomy.org/bibtex/2f1c726c4e4ade65e5d51048ed94bfe82/gron},
	keywords = {Proposal Distributed VM PhD},
    }

@inproceedings{1449910,
        title = {CZ: Multiple Inheritance Without Diamonds},
        address = {New York, NY, USA},
        author = {Donna Malayeri},
        booktitle = {OOPSLA Companion '08: Companion to the 23rd ACM SIGPLAN conference on Object oriented programming systems languages and applications},
        pages = {923--924},
        publisher = {ACM},
        year = 2008,
        url = {http://portal.acm.org/citation.cfm?id=1449910},
        description = {CZ},
	biburl = {http://www.bibsonomy.org/bibtex/2ec520bc58259b7440b27d98fd79f2040/gron},
	keywords = {Traits Inheritance multiple},
    location = {Nashville, TN, USA}, isbn = {978-1-60558-220-7}, doi = {http://doi.acm.org/10.1145/1449814.1449910}}

@mastersthesis{CacaoCell,
        title = {Java on Cell B.E.},
        author = {Georg Sorst},
        month = {September},
        school = {Fachhochschule Aachen},
        type = {Diploma Thesis},
        year = 2007,
        url = {http://vergiss-blackjack.de/diploma-thesis_georg-sorst_java-on-cell.pdf},
        biburl = {http://www.bibsonomy.org/bibtex/2abcb1809c49d2540770ca5b43bc6a250/gron},
	keywords = {Cell CacaoVM JVM},
    }

@article{HauptEtAlIET,
        title = {Disentangling Virtual Machine Architecture},
        author = {Michael Haupt and Bram Adams and Stijn Timbermont and Celina Gibbs and Yvonne Coady and Robert Hirschfeld},
        journal = {IET Journal Special Issue on Domain-Specific Aspect Languages},
        year = {accepted for publication, to appear},
        biburl = {http://www.bibsonomy.org/bibtex/268793cd4964a869845bf7646098ad7de/gron},
	keywords = {VMADL Me:MastersThesis Me:Duplicate Me:Refine},
    }

@inproceedings{GodsonT,
        title = {A Quantitative Study of the On-Chip Network and Memory Hierarchy Design for Many-Core Processor},
        address = {Los Alamitos, CA, USA},
        author = {Xu Wang and Ge Gan and Joseph Manzano and Dongrui Fan and Shuxu Guo},
        booktitle = {International Conference on Parallel and Distributed Systems},
        pages = {689-696},
        publisher = {IEEE Computer Society},
        volume = 14,
        year = 2008,
        description = {Digital Library},
	biburl = {http://www.bibsonomy.org/bibtex/2d708cf1635a861f21e46d0452e97dd9e/gron},
	keywords = {ManyCore},
    issn = {1521-9097}, doi = {http://doi.ieeecomputersociety.org/10.1109/ICPADS.2008.18}}

@techreport{UnrestrictedTM,
        title = {Unrestricted Transactional Memory:  Supporting I/O and System Calls within Transactions},
        address = {Philadelphia, PA},
        author = {Colin Blundell and E Christopher Lewis and Milo M. K. Martin},
        institution = {Department of Computer and Information Science, University of Pennsylvania},
        month = {April},
        number = {TR-CIS-06-09},
        year = 2006,
        url = {http://www.seas.upenn.edu/~milom/papers/tr06_unrestricted_transactions.pdf},
        biburl = {http://www.bibsonomy.org/bibtex/2b20405e1c8a4d856c61d7d917ad184bb/gron},
	keywords = {Combination locks STM PhD},
    }

@techreport{LocksAndTM,
        title = {Pathological Interaction of Locks with Transactional Memory},
        author = {Haris Volos and Neelam Goyal and Michael M. Swift},
        institution = {University of Wisconsin–Madison},
        month = {February},
        number = {CS-TR-2008-1631},
        year = 2008,
        url = {http://www.cs.wisc.edu/multifacet/papers/transact08_txlock.pdf},
        biburl = {http://www.bibsonomy.org/bibtex/2d9c20bdf39aa3b8c5a023fa280753080/gron},
	keywords = {Combination locks STM PhD},
    }

@article{keyhere,
        title = {Supporting Legacy Binary Code in a Software Transaction Compiler with Dynamic Binary Translation and Optimization},
        author = {Cheng Wang and Victor Ying and Youfeng Wu},
        journal = {Compiler Construction},
        pages = {291--306},
        year = 2008,
        url = {http://dx.doi.org/10.1007/978-3-540-78791-4_20},
        description = {SpringerLink - Book Chapter},
	abstract = {Transactional memory (TM) has been shown to be a promising programming model for multi-core systems. We developed a Software-based
Transactional Memory (STM) compiler that generates efficient transactional code for transactions to run on a STM runtime withoutthe need of transactional hardware support. Since real-world applications often invoke third party libraries available onlyin binary form, it is imperative for our STM compiler to support legacy binary functions and provide an efficient solutionto convert those invoked inside transactions to the corresponding transactional code. Our STM compiler employs a LightweightDynamic Binary Translation and Optimization Module (LDBTOM) to automatically convert legacy binary functions to transactionalcode. In this paper, we describe our LDBTOM system, which 1) seamlessly integrates the translated code with the STM compilergenerated code to run on the STM runtime, and 2) optimizes the translated code taking advantage of dynamic optimization opportunitiesand STM runtime information. Although the binary code is inherently harder to optimize than high-level source code, our experimentshows that it can be translated and optimized into efficient transactional code by LDBTOM.},
	biburl = {http://www.bibsonomy.org/bibtex/2f61ed39c56680dc0f6a43045d0108efc/gron},
	keywords = {imported},
    }

@inproceedings{1352693,
        title = {Linguistic Symbiosis between Actors and Threads},
        address = {New York, NY, USA},
        author = {Tom Van Cutsem and Stijn Mostinckx and Wolfgang De Meuter},
        booktitle = {ICDL '07: Proceedings of the 2007 international conference on Dynamic languages},
        pages = {222--248},
        publisher = {ACM},
        year = 2007,
        url = {http://portal.acm.org/citation.cfm?doid=1352678.1352693},
        description = {Linguistic symbiosis between actors and threads},
	biburl = {http://www.bibsonomy.org/bibtex/2970842eec65839b0811d8f0bc3912686/gron},
	keywords = {imported},
    location = {Lugano, Switzerland}, isbn = {978-1-60558-084-5}, doi = {http://doi.acm.org/10.1145/1352678.1352693}}

@book{573304,
        title = {Transaction Processing: Concepts and Techniques},
        address = {San Francisco, CA, USA},
        author = {Jim Gray and Andreas Reuter},
        publisher = {Morgan Kaufmann Publishers Inc.},
        year = 1992,
        url = {http://portal.acm.org/citation.cfm?id=573304},
        description = {Transaction Processing},
	biburl = {http://www.bibsonomy.org/bibtex/27011b2bbd6a23bf04a7efbeb43362b3b/gron},
	keywords = {Combination Actors STM PhD},
    isbn = {1558601902}}

